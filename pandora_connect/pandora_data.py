import subprocess
import os
import json


CURRENT = os.getcwd()
CONFIG_FILE = CURRENT + '/config.json'

try:
    with open(CONFIG_FILE, 'r') as file:
        CONFIG = json.load(file)
except FileNotFoundError:
    print('Config file has been lost or renamed. Put them (name: "config.json") in the same folder with this script')
    exit(1)

MAIN_CONFIG = CONFIG['main_config']
QT_CONF = CONFIG['qt_config']

MAIN_FILE = CURRENT + '/' + MAIN_CONFIG['main_file']
WEB_LOGIN = CURRENT + '/' + MAIN_CONFIG['web_login']
START = CURRENT + '/' + MAIN_CONFIG['start']
CRON_SYNC = CURRENT + '/' + MAIN_CONFIG['cron_sync']
ICON = CURRENT + '/' + MAIN_CONFIG['icon']
INC_LIST = CURRENT + '/' + MAIN_CONFIG['include_list']
CP_ADDRESS = MAIN_CONFIG['cp_address']
FIREFOX_PROFILE = MAIN_CONFIG['firefox_profile']
PROFILE_LOCAL = MAIN_CONFIG['profile_local']
DOWNLOADS_LOCAL = MAIN_CONFIG['downloads_local']
PROFILE_SERVER = MAIN_CONFIG['profile_server']
DOWNLOADS_SERVER = MAIN_CONFIG['downloads_server']
PRE_SHUTDOWN_FILE = MAIN_CONFIG['pre_shutdown_file']
PRE_SHUTDOWN_SERVICE = MAIN_CONFIG['pre_shutdown_service']


def own_sync(username, password):
    cmd_own_profile = ['owncloudcmd', '-s', '-u', username, '-p', password, PROFILE_LOCAL, PROFILE_SERVER]
    code_own = subprocess.call(cmd_own_profile)
    cmd_rsync_in = ['rsync', '-qlpgor', PROFILE_LOCAL, FIREFOX_PROFILE]
    code_rsync = subprocess.call(cmd_rsync_in)
    if code_own == 0 and code_rsync == 0:
        return 1
    else:
        return 2


def start_files_create(username, password):
    sync_file = [
        '#!/usr/bin/env bash\n\n',
        'rsync -qlpgor --include-from="{0}" --exclude "*" {1} {2}\n'.format(
            INC_LIST, FIREFOX_PROFILE, PROFILE_LOCAL),
        'owncloudcmd -s -u {0} -p {1} {2} {3}\n'.format(
            username, password, PROFILE_LOCAL, PROFILE_SERVER),
        'owncloudcmd -s -u {0} -p {1} {2} {3}\n'.format(
            username, password, DOWNLOADS_LOCAL, DOWNLOADS_SERVER),
    ]
    with open(CRON_SYNC, 'w') as file:
        file.writelines(sync_file)
    os.chmod(CRON_SYNC, 0o755)
    cmd_cron_add = 'systemd-run --user --on-calendar="*-*-* *:*:00" ' + CRON_SYNC
    subprocess.call(cmd_cron_add, shell=True)
    start_file = [
        '#!/usr/bin/env bash\n\n',
        'firefox -url https://yandex.ru && sleep 3 && python {} off\n'.format(MAIN_FILE),
    ]
    with open(START, 'w') as file:
        file.writelines(start_file)
    os.chmod(START, 0o755)
    subprocess.Popen(START)


def stop():
    cmd_cron_del = 'systemctl --user stop "*.timer"'
    subprocess.call(cmd_cron_del, shell=True)
    subprocess.call(CRON_SYNC)
    return 1


def shutdown():
    cmd = 'sleep 1 && sudo shutdown'
    subprocess.Popen(cmd, shell=True)


def before_shutdown():
    service_file = [
        '[Unit]\n',
        'Description=Generated by script Pandora. Runs only upon shutdown\n',
        'After=network.target\n',
        'Conflicts=shutdown.target\n',
        'Conflicts=umount.target\n\n',
        '[Service]\n',
        'Type=oneshot\n',
        'ExecStart=/bin/true\n',
        'ExecStop=/bin/bash {}\n'.format(CRON_SYNC),
        'RemainAfterExit=yes\n\n',
        '[Install]\n',
        'WantedBy=multi-user.target',
    ]
    with open(PRE_SHUTDOWN_FILE, 'w') as file:
        file.writelines(service_file)
    os.chmod(PRE_SHUTDOWN_FILE, 0o644)

    cmd_cp = 'sudo cp -f {0} {1}'.format(PRE_SHUTDOWN_FILE, PRE_SHUTDOWN_SERVICE)
    subprocess.call(cmd_cp, shell=True)

    cmd_start = 'sudo systemctl daemon-reload && sudo systemctl start {}'.format(PRE_SHUTDOWN_FILE)
    subprocess.call(cmd_start, shell=True)
